# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import osv, fields
from datetime import datetime, date, time, timedelta
from json import dumps, loads, JSONEncoder, JSONDecoder
from dateutil.relativedelta import *



class miembro_referencial(osv.osv):
    _name = 'miembro_referencial'
    _rec_name = 'codigo'
        
    def _cod_familia(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        for o in self.browse(cr, uid, ids, context=context):
		    res[o.id] = '%s-%s-%s' % (o.nombres ,o.sector ,o.casa_edif)
        return res
    def limpiar_campos(self,cr,uid,ids,nombre):
        res = {}
        if nombre =='redi':
            res = {
            'estado_id':'',
            'municipio_id':'',
            'parroquia_id':'',
            } 
        if nombre =='estado':
            res = {
            'municipio_id':'',
            'parroquia_id':'',
            }
        if nombre =='municipio':
            res = {
            'parroquias_id':'',
            }
        return {
         'value':res
            }
            
    #~ 
    #~ def _cod_fundo(self, cr, uid, ids, field_name, arg, context=None):
        #~ res = {}
        #~ for o in self.browse(cr, uid, ids, context=context):
		    #~ res[o.id] = '%s-%s' % (o.estado_id.codigo ,o.nombre)
        #~ return res                 
    
    _columns = {
        'nombres': fields.char('Nombre de la Familia', size=100, required=True),
        'codigo': fields.function(_cod_familia, string='Cod. Familia', type="char",size=100, store=True),
        'grupo_familiar_ids': fields.one2many('grupo_familiar', 'miembro_referencial_id', 'Persona'),
        'redi_id': fields.many2one('redi', 'REDI', required=True),
        'estado_id': fields.many2one('inces_estados', 'Estado', required=True),
        'municipio_id': fields.many2one('inces_municipios', 'Municipio', required=True),
        'parroquia_id': fields.many2one('inces_parroquias', 'Parroquia', required=True),
        'sector': fields.char('Sector', size=100, required=True),
        'av_calle': fields.char('Avenida/Calle', size=100),
        'casa_edif': fields.char('Casa/Edificio', size=100, required=True),
        'numero': fields.char('Nro Casa/Apto', size=10),
        'fundo_id': fields.many2one('fundo', 'Fundo Zamorano', required=True),
        'Lugar_residencia':fields.selection([('fundo', 'Fundo'), ('zona_periferica', 'Zona Periferica')], 'Lugar de Residencia', help="Se colocara el lugar de residencia del miembro referencial (Fundo o Zonas Perifericas).", required=True, states={'fundo': [('readonly', False)]}),
        'Estatus_produccion':fields.selection([('activa', 'Activa'), ('no_activa', 'No Activa')], 'Estatus produccion', help="Se colocara el Estatus del Fundo Zamorano en la produccion (Activa y No Activa).", required=True, states={'activa': [('readonly', False)]}),
        'active': fields.boolean('Activo'),
    }
    
   
    _defaults = {
       'Lugar_residencia': 'fundo',
       'Estatus_produccion': 'activa',
       'active':True, 
   }
    _sql_constraints = [
        ('codigo_unique','unique(codigo)',u'El nombre del Fundo debe ser unico'),
        
        ]
    
miembro_referencial()

class grupo_familiar(osv.osv):
    _name = 'grupo_familiar'
    _rec_name = 'nombre'
    
    
    def edad(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        now = date.today()
        if isinstance(ids,(int,long)):
            ids=[ids]
        for i in ids:
            anos="Años"
            meses="Meses"
            dias="Días"
            fecha=self.browse(cr,uid,i)
            a,m,d=fecha.fecha_nac.split('-')
            fecha_nac = date(int(a),int(m),int(d))
            edad=relativedelta(now, fecha_nac)
            if edad.years==1 or edad.years==0 :
                anos="Año"
            if edad.months==1 or edad.months==0 :
                meses="Mes"
            if edad.days==1 or edad.days==0 :
                dias="Día"
            mens=" %s %s; %s %s; %s %s  " % (edad.years,anos,edad.months,meses,edad.days,dias)
            res[i]=mens
        return res
        
    _columns = {
        'nombre': fields.char('Nombres', size=100, required=True),
        'miembro_referencial_id': fields.many2one('miembro_referencial', 'Familia'),
        'apellidos': fields.char('Apellidos', size=100, required=True),
        'cedula': fields.char('Cedula', size=10),
        'grupo_familiar_ids': fields.one2many('grupo_familiar', 'miembro_referencial_id', 'Persona'),
        'fecha_nac': fields.date('Fecha de Nacimiento', required=True),
        'edad': fields.function(edad ,'Edad',type='char', help=' edad'),
        'genero_id': fields.many2one('genero', 'Genero', required=True),
        'estado_civil_id': fields.many2one('estado_civil', 'Estado Civil', required=True),
        'nivel_educativo_id': fields.many2one('nivel_educativo','Nivel Educativo'),
        #'partido_politico_id': fields.many2one('partido_politico', 'Partido Politico'),
        'instrumento_agrario_id': fields.many2one('intrumento_agrario', 'Instrumento Agrario'),
        'correo': fields.char('Correo', size=50),
        'pasaporte': fields.char('Nro Pasaporte', size=15),
        'fecha_vence': fields.date('Fecha Vcto Pasaporte'),
        'movimiento_ids': fields.one2many('movimiento_grupo', 'grupo_familiar_id', 'Persona', size=100, required=True),
        'misiones_ids': fields.one2many('misiones_grupo', 'grupo_familiar_id', 'Persona'),
        'enf_dis_grupo_ids': fields.one2many('enf_dis_grupo', 'grupo_familiar_id', 'Persona'),
        'fundo_organizacion_grupo_ids': fields.one2many('fundo_organizacion_grupo', 'grupo_familiar_id', 'Organizacion que Pertenece'),
        'telefono_grupo_ids': fields.one2many('telefono_grupo', 'grupo_familiar_id', 'Persona'),
        'active': fields.boolean('Activo'),
        
    }
    _sql_constraints = [('cedula_unique','unique(cedula)','La Cedula deben ser unica')] 
    
    
    def calculo_edad(self, cr, uid, ids, fecha_nac, context=None):
        res={}
        now = date.today()
        anos="Años"
        meses="Meses"
        dias="Días"
        if fecha_nac:
            a,m,d=fecha_nac.split('-')
            fecha_nac = date(int(a),int(m),int(d))
            edad=relativedelta(now, fecha_nac)
            if edad.years==1 or edad.years==0 :
                anos="Año"
            if edad.months==1 or edad.months==0 :
                meses="Mes"
            if edad.days==1 or edad.days==0 :
                dias="Día"
            if edad.years+edad.months+edad.days>0:
                    mens=" %s %s; %s %s; %s %s  " % (edad.years,anos,edad.months,meses,edad.days,dias)
            else:
                raise osv.except_osv(('Error !'), ('Fecha de nacimiendo incorrecta: %s' % fecha_nac ))
            res['edad'] = mens
        return {'value': res}
    _defaults = {
        'active':True,
        
        
    }
    
    def validar_campo_numerico(self, cr, uid, ids):
        for d in self.browse(cr, uid, ids):
            if d.cedula!= False:
                print('nfjkdfndjkfhnkjdnfjkdnfdjk')
                print('nfjkdfndjkfhnkjdnfjkdnfdjk')
                print('nfjkdfndjkfhnkjdnfjkdnfdjk')
                print('nfjkdfndjkfhnkjdnfjkdnfdjk')
                print(d.cedula)
                if d.cedula.isdigit()== False:
                    raise osv.except_osv(
                    ('Error!'),
                    (u'El campo cedula de  debe ser\
                     numerico %s'% d.cedula))
            for dt in d.telefono_grupo_ids:
                numero1=dt.numero
                numero=dt.numero.replace(' ','')
                if len(numero1)==len(numero):
                 if dt.numero.isdigit()==False:
                    raise osv.except_osv(
                    ('Error!'),
                    (u'El campo telefono del Asociado  %s debe ser\
                     numerico %s'% (d.nombre,dt.numero)))
                else:
                    raise osv.except_osv(
                    ('Error!'),
                    (u'El campo telefono   %s no debe de\
                    tener espacios en blanco "%s"'% (d.nombre,dt.numero)))    
        return True
        
    _constraints = [
                   (validar_campo_numerico,' ',  ['nombre']), 
                ] 
    
grupo_familiar()

class fundo_organizacion_grupo(osv.osv):
    _name = 'fundo_organizacion_grupo'
    _rec_name = 'fundo_id'
    #_rec_name = 'organizacion_id'
    #_rec_name = 'grupo_familiar_id'
    
    _columns = {
        'fundo_id': fields.many2one('fundo', 'Fundo Zamorano', required=True),
        'organizacion_id': fields.many2one('organizacion', 'Organizacion', required=True),
        'grupo_familiar_id': fields.many2one('grupo_familiar', 'Organizacion que Pertenece'),
    }
    
fundo_organizacion_grupo()

class genero(osv.osv):
    _name = 'genero'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre del Genero', size=50, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
genero()

class estado_civil(osv.osv):
    _name = 'estado_civil'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Estado Civil', size=50, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
estado_civil()

class nivel_educativo(osv.osv):
    _name = 'nivel_educativo'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nivel Educativo', size=50, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
nivel_educativo()


class partido_politico(osv.osv):
    _name = 'partido_politico'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Partido Politico', size=100, required=False),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
partido_politico()

class intrumento_agrario(osv.osv):
    _name = 'intrumento_agrario'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Instrumento Agrario', size=100, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
intrumento_agrario()


class tipo_telefono(osv.osv):
    _name = 'tipo_telefono'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Tipo de Telefono', size=50, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
tipo_telefono()


class movimiento(osv.osv):
    _name = 'movimiento'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre movimiento', size=200, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True,
        
    }
    
movimiento()


class movimiento_grupo(osv.osv):
    _name = 'movimiento_grupo'
    _rec_name = 'movimiento_id'
    #_rec_name = 'grupo_familiar_id'
    
    _columns = {
        'movimiento_id': fields.many2one('movimiento','Movimiento', required=True),
        'grupo_familiar_id': fields.many2one('grupo_familiar', 'Persona'),
        
    }
    
movimiento_grupo()

class mision(osv.osv):
    _name = 'mision'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre Mision', size=200, required=True),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True,
        
    }
    
mision()

class misiones_grupo(osv.osv):
    _name = 'misiones_grupo'
    _rec_name = 'mision_id'
    #_rec_name = 'grupo_familiar_id'
    
    _columns = {
        'mision_id': fields.many2one('mision', 'Mision', required=True),
        'grupo_familiar_id': fields.many2one('grupo_familiar', 'Persona'),
    }
    
misiones_grupo()

class enf_dis_grupo(osv.osv):
    _name = 'enf_dis_grupo'
    _rec_name = 'nombre'
    #_rec_name = 'grupo_familiar_id'
    
    _columns = {
        'nombre': fields.char('Nombre Enfermedad o discapacidad', size=150, required=True),
        'grupo_familiar_id': fields.many2one('grupo_familiar', 'Persona' , required=True),
        'observacion': fields.text('Observacion'),
        'enfer_disc':fields.selection([('enf', 'Enfermedad'), ('dis', 'Discapacidad')], 'Enfermedad o Discapacidad', help="Selecciona una enfermedad o discapacidad", required=True, states={'enf': [('readonly', False)]}),
    }
    _defaults = {
       'enfer_disc': 'enf',
       
   }
    
enf_dis_grupo()

class telefono_grupo(osv.osv):
    _name = 'telefono_grupo'
    #_rec_name = 'grupo_familiar_id'
    _rec_name = 'numero'
    #_rec_name = 'tipo_telefono_id'
    
    _columns = {
        'grupo_familiar_id': fields.many2one('grupo_familiar', 'Persona'),
        'numero': fields.char('Numero Telefono', size=15, required=True),
        'tipo_telefono_id': fields.many2one('tipo_telefono', 'Tipo de Telefono', required=True),
    }
   
    
telefono_grupo()

