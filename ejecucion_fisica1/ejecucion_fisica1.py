# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import osv, fields
from datetime import datetime, date, time, timedelta
from json import dumps, loads, JSONEncoder, JSONDecoder
class acciones_especificas(osv.osv):
    """(NULL)"""
    _name = 'acciones_especificas'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre', size=40, required='True', help=' Nombre de la accion especifica '),
    }
    
acciones_especificas()

class tecnicas_dinamicas(osv.osv):
    _name = 'tecnicas_dinamicas'
    _rec_name = 'nombre'
    #_rec_name = 'ejecucion_fisica_id'
    
    _columns = {
        'nombre': fields.char('Nombre', size=40, required='True', help=' Se reflejara el método de Acompañamiento (visita, visita técnica, gira, charla, conservatorio, reunión, día de campo, hora radio, cine-foro, evento socio-cultural y circulo de lectura) y de capacitación (curso, demostración de método y demostración de resultados) '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' relacion que existe entre ejecucion fisica y tecnicas dinamicas '),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
tecnicas_dinamicas()

class materiales_apoyo(osv.osv):
    _name = 'materiales_apoyo'
    _rec_name = 'nombre'
    #_rec_name = 'ejecucion_fisica_id'
    
    _columns = {
        'nombre': fields.char('Nombre', size=40, required='True', help=' Se reflejara los materiales empleados para realizar la actividad de capacitación y acompañamiento (Laptop, proyector, Dvd, Papel bond, marcadores, hojas , lapices, etc)  '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' relacion que exite entre ejecucion fisica y materiales de apoyo '),
    }
    
materiales_apoyo()

class componentes_proyecto(osv.osv):
    _name = 'componentes_proyecto'
    _rec_name = 'descripcion'
    #_rec_name = 'ejecucion_fisica_id'
    
    _columns = {
        'tipo_comp_proy_id': fields.many2one('tipo_componentes_proyecto', 'Nombre del Componete', required='True', help=' Se reflejara los componentes (Fortalecimiento de los Fundos Zamoranos como organización del Poder Popular, Desarrollo del Modelo Productivo de Gestión Socialista de los Fundos Zamoranos y Articulación estratégica)   que fueron empleados en esa actividad de capacitación o acompañamiento. '),
        'descripcion': fields.text('Descripcion', required='True', help=' Describir como tributa la actividad a los componentes reflejados (Impacto) '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' relacion que existe entre ejecucion fisica y componentes del proyecto '),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
componentes_proyecto()

class tipo_componentes_proyecto(osv.osv):
    _name = 'tipo_componentes_proyecto'
    _rec_name = 'tipo_comp_proy'
    
    _columns = {
        'tipo_comp_proy': fields.char('Nombre del Componete', size=100, required='True', help=' Nombre del componentes del proyecto'),
      
    }
    
tipo_componentes_proyecto()

class ejes_transversales(osv.osv):
    _name = 'ejes_transversales'
    _rec_name = 'descripcion'
    #_rec_name = 'ejecucion_fisica_id'
    
    _columns = {
        'tipo_eje_transv_id': fields.many2one('tipo_ejes_transversales', 'Ejes Transversales', required='True', help=' Se reflejara los Ejes trasversales (Politico-ideologico, Comunicación Popular, Preservación de la Vida, Igualdad y Equidad e igualdad de Genero)  que fueron empleados en esa actividad de capacitación o acompañamiento. '),
        'descripcion': fields.text('Descripcion', required='True', help=' Describir como tributa la actividad ejecutada a los ejes trasversales reflejados (Impacto) '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' relacion que existes entre ejecucion fisica y ejes transversales '),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
ejes_transversales()

class tipo_ejes_transversales(osv.osv):
    _name = 'tipo_ejes_transversales'
    _rec_name = 'tipo_eje_transv'
    
    _columns = {
        'tipo_eje_transv': fields.char('Ejes Transversales', size=500, required='True', help=' Nombre de los ejes transversales '),
    }
    
tipo_ejes_transversales()

class tecnicos(osv.osv):
    _name = 'tecnicos'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre', size=40, required='True', help=' Nombre del tecnico '),
        'cedula_identidad': fields.char('Cedula de identidad', size=10, required='True', help=' cedula de identidad del tecnico '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' relacion que existe entre ejecucion fisica y tecnicos '),
    }
    
tecnicos()

class instituciones_adscritas(osv.osv):
    _name = 'instituciones_adscritas'
    _rec_name = 'tipo_instituciones_adscritas_id'
    
    _columns = {
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' relacion que existe entre ejecucion fisica y instituciones adscritas '),
        'sector_pertenece': fields.selection([('publico', 'Publico'), ('privado', 'Privado')], 'Entes del sector', help="Refleja el sector al que pertenecen las Instituciones adscritas (Publico o Privado)", required=True, states={'publico': [('readonly', False)]}),
        'tipo_instituciones_adscritas_id': fields.many2one('tipo_instituciones_adscritas', 'Entes adscritas', required='True', help='Relación de las Instituciones Adscritas con los Tipos de Instituciones'),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'sector_pertenece': 'publico',
        'active':True, 
        
    }
    
instituciones_adscritas()


class tipo_instituciones_adscritas(osv.osv):
    _name = 'tipo_instituciones_adscritas'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Entes adscritas', size=100, required='True', help=' Nombre de las Instituciones '),
        
        
        
    }
    
tipo_instituciones_adscritas()

class personas_atendidas(osv.osv):
    _name = 'personas_atendidas'
    _rec_name = 'cantidad'
    #_rec_name = 'tipo_persona_id'
    #_rec_name = 'ejecucion_fisica_id'
    
    _columns = {
        'cantidad': fields.char('Cantidad', size=4, required='True', help=' Se refleja el numero de las personas atendidas en esa actividad de Acompañamiento y Capacitación '),
        'tipo_persona_id': fields.many2one('tipo_persona', 'Grupo Etario', required='True', help=' Debe seleccionar el Grupo Etario (Hombres, Mujeres, Niños, Niñas) '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' Relacion de ejecucion fisica con personas atendidas '),
    }
    
personas_atendidas()

class tipo_persona(osv.osv):
    _name = 'tipo_persona'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre', size=40, required='True', help=' nombres de los tipos de personas '),
        'active': fields.boolean('Activo'),
    }
    _defaults = {
        'active':True, 
        
    }
    
tipo_persona()

class ejecucion_fisica(osv.osv):
    _name = 'ejecucion_fisica'
    _rec_name = 'nombre_objetivo'
    
    def retorna_id_tecnicos(self, cr, uid, context=None):
        res=[]
        res_user=self.pool.get('res.users')
        usuario_id=res_user.search(cr,uid,[])
        usuario_mapa=res_user.browse(cr, uid, usuario_id)
        #~ personas_id=res_user.search(cr,uid,[])
        for d in usuario_mapa:
            for grupo in d.groups_id:
                if grupo.name=='TECNICOS':
                    if uid!=d.id:
                        res.append(d.id)
        return res
        
                
    def _cod_pers_atendidas(self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        arr = []
        qwer=0
        for o in self.browse(cr, uid, ids, context=context):
            for w in o.personas_atendida_ids:
                arr.append(w.tipo_persona_id.nombre)
                for i in arr:
                    if arr.count(w.tipo_persona_id.nombre)!=1:
                        qwer=0
                        raise osv.except_osv(('Error !'), ('haz seleccionado dos veces %s' % (w.tipo_persona_id.nombre)))
                qwer+=int(w.cantidad)                        
        res[o.id] = qwer
        qwer=0
        return res
    
    def usuario_creador(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        ef_brw=self.browse(cr, uid, ids)
        for o in ef_brw:
            cr.execute('SELECT u.create_uid FROM ejecucion_fisica AS u WHERE u.id = %s'% o.id)
            creador_id=cr.fetchall()
            creadores=self.pool.get('res.users').browse(cr, uid, [creador_id[0][0]])
            res[o.id]=[p.name for p in creadores]
        return res
         
    
    


    _columns = {
        'objetivo': fields.text('Objetivo', required='True', help=' Se reflejara  cual es el objetivo o fin principal de la actividad de acompañamiento o capacitación '),
        'nombre_objetivo': fields.char('Nombre de la Temática', size=150, required='True', help='Nombre de la temática  de la actividad de Capacitación o Acompañamiento.'),
        'numero_familia': fields.char('Familias Atendidas', size=4, help=' numero de Familias Atendias que no pertenecen al Fundo Zamorano'),
        'numero_personas': fields.function(_cod_pers_atendidas, string='Personas Atendidas', type="char",size=100, store=True, help=' numero de Personas Atendias que no pertenecen al Fundo Zamorano'),
        'persona_referencial': fields.char('Personas Referencial', size=100, help=' Nombre de Personas Referencial que no pertenecen al Fundo Zamorano'),
        'cedula_per_ref': fields.char('Cedula', size=15, help=' Cedula de Personas Referencial que no pertenecen al Fundo Zamorano'),
        'telefono_per_ref': fields.char('Telefono Contacto', size=15, help=' Telefono de la Personas Referencial que no pertenecen al Fundo Zamorano'),
        'correo_per_ref': fields.char('Correo', size=55, help=' Telefono de la Personas Referencial que no pertenecen al Fundo Zamorano'),
        'fecha_planificacion': fields.date('Fecha de planificacion', size=10, required='True', help=' Se refleja la fecha de planificación de la actividad de acompañamiento o capacitación a ejecutar. '),
        'fecha_ejecucion': fields.date('Fecha de ejecucion', size=10, required='True', help='se refleja la fecha la cual se ejecutara la actividad de acompañamiento o capacitación '),
        'resultado': fields.text('Resultado', required='True', help=' es la descripción del impacto positivo o negativo obtenido de la actividad acompañamiento o capacitación. Cabe a destacar que se debe realizar con un enfoque cualitativo. '),
        'fundo_id': fields.many2many('fundo','ejecucion_fundo_redi','ejecucion_id','fundo_id','Fundos Zamoranos', required='True',help=' Se seleccionara el nombre del Fundo Zamorano al cual se le cargara la actividad de capacitación o de acompañamiento '),
        #~ 'fundo_id': fields.selection(retorna_id_fundo, 'Fundo Zamorano', required='True',help=' Se seleccionara el nombre del Fundo Zamorano al cual se le cargara la actividad de capacitación o de acompañamiento '),
        'organizacion_id': fields.many2many('organizacion','ejecucion_organizacion_redi','ejecucion_id','organizacion_id','Organizaciones del Fundo Zamorano', help=' Organización  donde se ejecuto la actividad de Capacitación o Acompañamiento.'),
        'acciones_especificas_id': fields.many2one('acciones_especificas', 'Acciones especifica', required='True', help=' Se refleja la acción especifica ejecutada (Capacitación o Acompañamiento) '),
        'personas_atendida_ids': fields.one2many('personas_atendidas', 'ejecucion_fisica_id', 'Personas atendidas', required='True', help=' relacion que existe entre personas atendidas y ejecucion fisica '),
        'tecnicas_dinamicas_ids': fields.one2many('tecnicas_dinamicas', 'ejecucion_fisica_id', 'Tecnicas dinamicas', help=' relacion que existe entre tecnicas dinamicas y la ejecucion fisica '),
        'materiales_apoyo_ids': fields.one2many('materiales_apoyo', 'ejecucion_fisica_id', 'Materiales de apoyo', help=' relacion que existe entre materiales de apoyo y la ejecucion fisica '),
        'componentes_proyecto_ids': fields.one2many('componentes_proyecto', 'ejecucion_fisica_id', 'Componentes del proyecto' , help=' Relacion entre componentes proyecto y la ejecucion fisica '),
        'ejes_transversales_ids': fields.one2many('ejes_transversales', 'ejecucion_fisica_id', 'Ejes transversales', help=' Relacion de los Ejes transversales con la ejecucion fisica '),
        'imagenes_ids': fields.one2many('imagenes', 'ejecucion_fisica_id', 'Imagenes de la Ejecución Fisica', help='Relacion de las Imagenes con las Ejecuciones Fisicas'),
        #~ 'pere': fields.function(retorna_id_fundos, method=True, type='many2many', relation='grupo_familiar', string='BOM Products'),
        'personas_atendidas_ids': fields.many2many('grupo_familiar', 'personas', 'ejecucion_fisica_id', 'grupo_familiar_id', 'Familias Atendidas' ),
        'instituciones_adscritas_ids': fields.one2many('instituciones_adscritas', 'ejecucion_fisica_id', 'Instituciones Adscritas', required='True', help=' Relacion de  instituciones adscritas en la ejecucion fisica '),
        'tecnicos_ayuda_domain_ids': fields.many2many('res.users', 'tecnicos_ayuda_domain_usuarios', 'ejecucion_fisica_id', 'usuario_id', 'Tecnicos Relacionados que nos ayudara a cargar datos en tecnicos_ids ' ),
        'tecnicos_ids': fields.many2many('res.users', 'tecnicos_usuarios', 'ejecucion_fisica_id', 'usuario_id', 'Tecnicos Relacionados' ),
        'fecha_actual': fields.datetime('Fecha del Sistema', help='cuidado '),
        'active': fields.boolean('Activo'),
        'creador':fields.function(usuario_creador, string='Responsable', type="char"),
    }
    _defaults={
           'tecnicos_ayuda_domain_ids':retorna_id_tecnicos,
           'active':True, 
            }
    def ejes_transve(self, cr, uid, ids, context=None):
        
        arr = []
        for o in self.browse(cr, uid, ids, context=context):
            for w in o.ejes_transversales_ids:
                arr.append(w.tipo_eje_transv_id.tipo_eje_transv)
                for i in arr:
                    if arr.count(w.tipo_eje_transv_id.tipo_eje_transv)!=1:
                        raise osv.except_osv(('Error !'), ('haz seleccionado dos veces %s' % (w.tipo_eje_transv_id.tipo_eje_transv)))
                
        return True
    def compo(self, cr, uid, ids, context=None):
        arr = []
        for o in self.browse(cr, uid, ids, context=context):
            for w in o.componentes_proyecto_ids:
                arr.append(w.tipo_comp_proy_id.tipo_comp_proy)
                for i in arr:
                    if arr.count(w.tipo_comp_proy_id.tipo_comp_proy)!=1:
                        raise osv.except_osv(('Error !'), ('haz seleccionado dos veces %s' % (w.tipo_comp_proy_id.tipo_comp_proy)))
                
        return True
        

        
    def valida_fecha_eje_plan(self, cr, uid, ids, context=None):
        hoy=str(date.today())
        for r in self.browse(cr,uid,ids):
            if cmp(r.fecha_planificacion,r.fecha_ejecucion)==1:
                raise osv.except_osv(
                    ('Error!'),
                    (u'La Fecha de Ejecución %s no puede\
                     ser menor a la fecha de Planificacion\
                      %s'% (r.fecha_ejecucion,r.fecha_planificacion)))
            if cmp(r.fecha_planificacion,hoy)==1:
                raise osv.except_osv(
                    ('Error!'),
                    (u'La Fecha de Planificación %s\
                     no puede ser mayor a la fecha actual %s'
                     %(r.fecha_planificacion,hoy)))
            if cmp(r.fecha_ejecucion,hoy)==1:
                raise osv.except_osv(
                    ('Error!'),
                    (u'La Fecha de Ejecución %s\
                    no puede ser mayor a la fecha actual %s'
                    %(r.fecha_ejecucion,hoy)))
        return True
        
   
    def numero_caracteres(self, cr, uid, ids, context=None):
        for r in self.browse(cr,uid,ids):
            r.resultado
            print str(len(r.resultado))
            if len(r.resultado)< 130:
                
                return False
        return True
    _constraints = [
                (valida_fecha_eje_plan,' ',  ['validacion de fechas']), 
                (ejes_transve,' ',  ['validacion de los ejes transversales']),
                (compo,' ',  ['validacion de los componentes  del proyecto']),
                (numero_caracteres,' ',  ['La cantidad  de  caracteres en el campo Resultado debe ser mayor ']),
                ]
    
ejecucion_fisica()
class familias_atend(osv.osv):
    _name = 'familias_atend'
    _rec_name = 'miembro_referencial_id'
    
    _columns = {
        'miembro_referencial_id': fields.many2one('miembro_referencial', 'Miembro Referencial', required='True', help=' Relacion de ejecucion fisica con personas atendidas '),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion fisica', required='True', help=' Relacion de ejecucion fisica con personas atendidas '),
    }
    
familias_atend()

class imagenes(osv.osv):
    """(NULL)"""
    _name = 'imagenes'
    _rec_name = 'nombre'
    
    _columns = {
        'nombre': fields.char('Nombre del archivo',size=150, required=True),
        'archivo': fields.binary('Crgar de archivos',filters='*.png,*.gif,*.doc,*.docx,.*.odt,.*.pdf,*.ods,*.jpg,*.xlsx,*.xls,*.csv'),
        'ejecucion_fisica_id': fields.many2one('ejecucion_fisica', 'Ejecucion Fisica', required='True', help=' Relacion de ejecucion fisica con las imagenes'),
    }
    
imagenes()




